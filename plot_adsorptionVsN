#!/usr/bin/python3

import sys
import os
from glob import glob
import matplotlib
matplotlib.use('Agg')
from pylab import *
sys.path.append('/home/fbrasili/.python')
from chains import *
from init_file import check_init

print()
print( "======================================================================================================================================" )
print()
print( " plot Vs total number of nanoparticles in the simulation box: " )
print( "     1. the number of adsorbed nanoparticles " )
print( "     2. their total charge " )
print( "     3. its ratio with the total charge of the microgel " )
print( "     4. the average number of charged monomers adsorbed to each nanoparticle " )
print( " adsorbed particles are those within threshold distance determined by the g(r)" )
print( " adsorbed nanoparticles are also computed as those within Rh from the microgel COM " )
print( " save the plots in the directory plots_adsorpion " )
print()
print( "======================================================================================================================================" )
print()
print( "  Usage: " )
print( "    plot_adsorption -options" )
print( "  Options: " )
print( "    -dir <name>		name of the directory where performing the analysis (default ./) " )
print( "    -Nmin <value>	minimum number of points to plot: if N<Nmin does not plot the adsorption curve (default 4) " )
#print( "    -alpha <value>	AGGIUNGERE LA POSSIBILITA'DI SCEGLIERE UN VALORE DI ALPHA DIVERSO DA 0 " )
print()
print( "======================================================================================================================================" )
print()

alpha = "0.00" # PER ORA ALPHA E' FISSATO, MODIFICARE LO SCRIPT PER POTERLO SCEGLIERE

###########################
### function definition ###
def compute_Nads(path, ret_std=True):
    with open( path , "r") as f: Nadss = array( [ int( line.split()[2] ) for i,line in enumerate(f) if "# N" in line ] )
    if ret_std: return Nadss.mean(), Nadss.std()
    else:       return Nadss.mean()

###########################################################
### name of the directory where to perform the analysis ###
if "-dir" in sys.argv:
    idx = sys.argv.index( "-dir" ) + 1
    fol = sys.argv[idx]
else:
    fol0 = "./"
assert os.path.isdir( fol0 ), "the directory " + fol0 + " does not exist"

################################################
### name of the directory where to save data ###
fol_plots = os.path.join( fol0 , 'plots_adsorption' )
if not os.path.isdir( fol_plots ): os.system( 'mkdir ' + fol_plots )

#############################################################################
### name of the directories with data from simulations, N, D and Q values ###
fols = array( glob( os.path.join( fol0 , "np*" ) ) )
Ns,Qs,Ds = [],[],[]
for fol in fols:
    idx0 = fol.index('/') ; idx0 = idx0 + fol[idx0:].index('_')
    idx1 = idx0 + fol[idx0:].index('n') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Ns += [ int(   fol[idx1:idx2] ) ]
    idx1 = idx2 + fol[idx2:].index('q') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Qs += [ int(   fol[idx1:idx2] ) ]
    idx1 = idx2 + fol[idx2:].index('D') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Ds += [ float( fol[idx1:idx2] ) ]
fols, Ns, Qs, Ds = fols[argsort(Ns)], array(Ns)[argsort(Ns)], array(Qs)[argsort(Ns)], array(Ds)[argsort(Ns)]

###################################################################
### for each [N,Q,D]: compute Nads, Qads, and Qratio=Qads/Qmgel ###
print( "computing the average number of adsorbed nanoparticles in each directory ..." )
paths  = [ os.path.join( f , 'alpha_'+alpha , 'adsorbed_nps.dat' ) for f in fols ]
Nads,stdsN = array([ [ loadtxt( path, usecols=(1) ).mean(), loadtxt( path, usecols=(1) ).std() ]  for path in paths ]).transpose() # here Nads is computed based on the distances between ions and NPs
Qads,stdsQ = Nads*Qs,stdsN*Qs

paths = [ os.path.join( f , 'alpha_'+alpha , 'nanoparts_bonded' , 'configurations.dat' ) for f in fols ]
Nads2,stdsN2 = array([ compute_Nads(path, ret_std=True) for path in paths ]).transpose() # here Nads is computed based on the radial postions of NPs

Qads,stdsQ = Nads*Qs,stdsN*Qs

paths = array([ os.path.join( f , 'alpha_'+alpha , 'charge_mgel.dat' ) for f in fols ])
there_are = array([os.path.isfile( path ) for path in paths ])
if not all(there_are):
    print( "computing the total charge of the microgel in each directory ..." )
    for f,path in zip(fols[~there_are],paths[~there_are]):
        Q3,N3 = check_init( os.path.join( f, 'alpha_'+alpha, 'mgel_nanoparts_eq10e6.dat' ), retPartType=3, ret=True, verb=False )
        with open( path, "w" ) as p: p.write( "%i"%(Q3*N3) )
Qmg = array([ int( loadtxt(path) ) for path in paths])
Qratio,stdsQr = Qads/Qmg,stdsQ/Qmg

paths = [ os.path.join( f , 'alpha_'+alpha , 'adsorbed.dat' ) for f in fols ]
for nads,stdN,qads,stdQ,qratio,stdQr,path in zip(Nads,stdsN,Qads,stdsQ,Qratio,stdsQr,paths):
    if os.path.isfile(path): os.system( "rm " + path )
    with open( path , "w" ) as of:
        of.write( 'Nads \t std \t Qads \t std \t Qads/Qmgel \t std \n' )
        of.write( '%.2f \t'%nads + ' %.2f \t'%stdN + '%.2f \t'%qads + ' %.2f \t'%stdQ + '%.2f \t'%qratio + '%.2f \n'%stdQr )

paths  = [ os.path.join( f , 'alpha_'+alpha , 'bonded_ions.dat' ) for f in fols ]
datas = array([ loadtxt( path, usecols=(0,1), unpack=True ) for path in paths ])
Nions,stdsI = array([ [ sum(y*x)/sum(y) , sqrt( sum(y*x**2)/sum(y) - ( sum(y*x)/sum(y) )**2 ) ] for x,y in datas ]).transpose()

#############
### PLOTS ###
print( "plotting adsorption curves ..." )

fname_base = "adsorption"
couples = array([ [q,d] for q in set(Qs) for d in set(Ds) ])
ys    = [ Nads        , Qads        , Qratio               , Nions                 ]
dys   = [ stdsN       , stdsQ       , stdsQr               , stdsI                 ]
fns   = [ "NadsVsNtot", "QadsVsNtot", "QratioVsNtot"       , "NionsPerNPVsNtot"    ]
ylabs = [ r'$N_{ads}$', r'$Q_{ads}$', r'$Q_{ads}/Q_{mgel}$', r'$N_{ions}/N_{NPs}$' ]

#############################################################
### mimimum number of points to plot the adsoprtion curve ###
if "-Nmin" in sys.argv:
    idx = sys.argv.index('-Nmin') + 1
    nMin = int( sys.argv[idxD] )
else:
    nMin = 4

###################################################################
### select (according to nMin), save and plot adsorption curves ###
for Q,D in couples:
    cond = (Qs==Q) * (Ds==D)
    if cond.sum() < nMin: continue
    
    fname_pars = "_q%i"%Q + "_D%.1f"%D + "_alpha_" + alpha
    
    path = os.path.join( fol_plots ,  fname_base + fname_pars + ".dat"  )
    with open(path, "w") as of:
        of.write( "# Ntot \t Nads \t std \t Qads \t std \t Qads/Qmgel \t std \n" )
        of.write( '0 \t 0.00 \t 0.00 \t 0.00 \t 0.00 \t 0.00 \t 0.00 \n')
    savetxt( ".temp_data" , c_[Ns[cond],Nads[cond],stdsN[cond],Qads[cond],stdsQ[cond],Qratio[cond],stdsQr[cond]] )
    os.system( "cat .temp_data >> " + path )
    os.system( "rm .temp_data" )
    
    for y,dy,ylab,fn in zip(ys,dys,ylabs,fns):
        path = os.path.join( fol_plots , fn + fname_pars + ".pdf"  )
        figure()
        errorbar(Ns[cond], y[cond], yerr=dy[cond], fmt='o')
        xlabel( "number of nanoparticles in the simulation box", fontsize=16 )
        ylabel( ylab , fontsize=16 )
        savefig( path ) ; close()
    
    path = os.path.join( fol_plots ,  fname_base + "_comparison_" + fname_pars + ".dat"  )
    with open(path, "w") as of:
        of.write( "# Ntot \t Nads2 \t std \t Nads \t std \n" )
        of.write( '0 \t 0.00 \t 0.00 \t 0.00 \t 0.00 \n')
    savetxt( ".temp_data" , c_[Ns[cond],Nads2[cond],stdsN2[cond],Nads[cond],stdsN[cond]] )
    os.system( "cat .temp_data >> " + path )
    os.system( "rm .temp_data" )

    path = os.path.join( fol_plots , "Nads(mgel)VsNads(ions)" + fname_pars + ".pdf"  )
    figure()
    errorbar(Nads[cond], Nads2[cond], xerr=stdsN[cond], yerr=stdsN2[cond], fmt='o')
    xlabel( r'$N_{ads}$', fontsize=16 )
    ylabel( r'$N_{ads}$', fontsize=16 )
    savefig( path ) ; close()

##############################################
### comparison of curves with fixed D or q ###
for y,dy,ylab,fn in zip(ys,dys,ylabs,fns):
    for Q in sort( list(set(Qs)) ):
        skip = True
        path = os.path.join( fol_plots , fn + "_q%i"%Q + "_alpha_" + alpha + ".pdf"  )
        figure()
        for D in sort( list(set(Ds)) ):
            cond = (Qs==Q) * (Ds==D)
            if cond.sum() < nMin: continue
            skip = False
            errorbar(Ns[cond], y[cond], yerr=dy[cond], fmt='o', label='D = %.1f'%D )
        if skip: 
            close()
            continue
        xlabel( "number of nanoparticles in the simulation box", fontsize=16 )
        ylabel( ylab, fontsize=16 )
        legend( fontsize=16 , title='q = %i'%Q , title_fontsize=16 )
        savefig( path ) ; close()

    for D in sort( list(set(Ds)) ):
        skip = True
        path = os.path.join( fol_plots , fn + "_D%.1f"%D + "_alpha_" + alpha + ".pdf"  )
        figure()
        for Q in sort( list(set(Qs)) ):
            cond = (Qs==Q) * (Ds==D)
            if cond.sum() < nMin: continue
            skip = False
            errorbar(Ns[cond], y[cond], yerr=dy[cond], fmt='o', label='q = %i'%Q )
        if skip:
            close()
            continue
        xlabel( "number of nanoparticles in the simulation box", fontsize=16 )
        ylabel( ylab, fontsize=16 )
        legend( fontsize=16 , title='D = %.1f'%D , title_fontsize=16 )
        savefig( path ) ; close()

print( "all data and plots were saved in the directory " + fol_plots )
print() ; print( "Done." ) ; print()
