#!/usr/bin/python3

import sys
import os
from glob import glob
import matplotlib
matplotlib.use('Agg')
from pylab import *
sys.path.append('/home/fbrasili/.python')
from chains import *
from init_file import check_init

print()
print( "======================================================================================================================================" )
print()
print( " plot the radius of microgel (Rh and Rg) Vs total number of nanoparticles in the simulation box, total charge of the adsorbed nanoparticles, and its ratio with the microgel charge " )
print( " save the computed quantities and the plots in the directory plots_radius " )
print()
print( "======================================================================================================================================" )
print()
print( "  Usage: " )
print( "    plot_radius -options" )
print( "  Options: " )
print( "    -dir <name>		name of the directory where performing the analysis (default ./) " )
print( "    -Nmin <value>	minimum number of points to plot: if N<Nmin does not plot the adsorption curve (default 4) " )
print( "    -noNPs              uses the values of Rh computed excluding all nanoparticles " )
#print( "    -alpha <value>	AGGIUNGERE LA POSSIBILITÃ€ DI SCEGLIERE UN VALORE DI ALPHA DIVERSO DA 0
print()
print( "======================================================================================================================================" )
print()

alpha = "0.00" # PER ORA ALPHA E' FISSATO, MODIFICARE LO SCRIPT PER POTERLO SCEGLIERE

###########################################################
### name of the directory where to perform the analysis ###
if "-dir" in sys.argv:
    idx = sys.argv.index( "-dir" ) + 1
    fol0 = sys.argv[idx]
else:
    fol0 = "./"
assert os.path.isdir( fol0 ), "the directory " + fol0 + " does not exist"

################################################
### name of the directory where to save data ###
fol_plots = os.path.join( fol0 , 'plots_radius' )
if not os.path.isdir( fol_plots ): os.system( 'mkdir ' + fol_plots )

#############################################################################
### name of the directories with data from simulations, N, D and Q values ###
fols = array( glob( os.path.join( fol0 , "np*" ) ) )
Ns,Qs,Ds = [],[],[]
for fol in fols:
    idx0 = fol.index('/') ; idx0 = idx0 + fol[idx0:].index('_')
    idx1 = idx0 + fol[idx0:].index('n') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Ns += [ int(   fol[idx1:idx2] ) ]
    idx1 = idx2 + fol[idx2:].index('q') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Qs += [ int(   fol[idx1:idx2] ) ]
    idx1 = idx2 + fol[idx2:].index('D') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Ds += [ float( fol[idx1:idx2] ) ]
fols, Ns, Qs, Ds = fols[argsort(Ns)], array(Ns)[argsort(Ns)], array(Qs)[argsort(Ns)], array(Ds)[argsort(Ns)]

##############################################
### use Rh with or without considering NPs ###
if "-noNPs" in sys.argv: withNPs = False
else                   : withNPs = True

######################################################################
### for each [N,Q,D]: read Rg, Rh, Nads, Qads, and Qads/Qmgel data ###
path_ref = os.path.join( 'swelling' , 'shrinking' , 'ref_values.dat' )
ref_data = array([ loadtxt( os.path.join( f , path_ref ), usecols=(0,1,2,3,4) , unpack=True ) for f in fols ])
Rg0,dRg0,Rh0,dRh0 = array([ data[1:, data[0]==float(alpha) ].reshape(4,) for data in ref_data ]).transpose()

path_Rg = os.path.join( 'alpha_'+alpha , 'gyration_radii.dat' )
data_Rg = array([ loadtxt( os.path.join( f , path_Rg ), usecols=(1) ) for f in fols ])
Rg,dRg = data_Rg.mean(1),data_Rg.std(1) ; del data_Rg
#Rg  = array([ mean( loadtxt( os.path.join( f , path_Rg ), usecols=(1) ) ) for f in fols ])
#dRg = array([  std( loadtxt( os.path.join( f , path_Rg ), usecols=(1) ) ) for f in fols ])

path_Rh_y = os.path.join( 'alpha_'+alpha , 'zeno_rh' , 'hydrodynamic_radius_NP.dat'   )
data_Rh = loadtxt( os.path.join( f , path_Rh_y ), usecols=(1), skiprows=2 )
Rh_y,dRh_y = data_Rh.mean(1),data_Rh.std(1) ; del data_Rh
#Rh_y  = array([ mean( loadtxt( os.path.join( f , path_Rh_y ), usecols=(1), skiprows=2 ) ) for f in fols ])
#dRh_y = array([  std( loadtxt( os.path.join( f , path_Rh_y ), usecols=(1), skiprows=2 ) ) for f in fols ])

path_Rh_n = os.path.join( 'alpha_'+alpha , 'zeno_rh' , 'hydrodynamic_radius_noNP.dat' )
data_Rh = loadtxt( os.path.join( f , path_Rh_n ), usecols=(1), skiprows=2 )
Rh_n,dRh_n = data_Rh.mean(1),data_Rh.std(1) ; del data_Rh
#Rh_n  = array([ mean( loadtxt( os.path.join( f , path_Rh_n ), usecols=(1), skiprows=2 ) ) for f in fols ])
#dRh_n = array([  std( loadtxt( os.path.join( f , path_Rh_n ), usecols=(1), skiprows=2 ) ) for f in fols ])


path_Ads = os.path.join( 'alpha_'+alpha , 'adsorbed.dat' )
paths_Ads = array([ os.path.join( f , path_Ads ) for f in fols ])
if not all([ os.path.isfile( path ) for path in paths_Ads ]):
    skipQ = True
    print( "the file adsorbed.dat is missing in some of the directories alpha: run plot_adsorptionVsN" )
    print( "radius Vs Qads and radius Vs Qads/Qmgel will not be plotted " )
    print( )
else:
    skipQ = False
    Nads,dNads,Qads,dQads,Qratio,dQratio = array([ loadtxt( os.path.join( f , path_Ads ), skiprows=1 )  for f in fols ]).transpose()


#############
### PLOTS ###
print( "plotting radius curves ..." )

##########################################################
### mimimum number of points to plot the radius curves ###
if "-Nmin" in sys.argv:
    idx = sys.argv.index('-Nmin') + 1
    nMin = int( sys.argv[idx] )
else:
    nMin = 4

fname_base    = "mgelRadius"
fname_Rg_base = "mgelRg"
fname_Rh_base = "mgelRh"
fname_Rh_y_base = "mgelRh_NP"
fname_Rh_n_base = "mgelRh_noNP"

couples = array([ [q,d] for q in set(Qs) for d in set(Ds) ])

if skipQ:
    xs,dxs,fns,xlabs = [Ns],[zeros_like(Ns)],["VsNtot"],[r'$N_{tot}$']
else:
    xs    = [ Ns            , Qads        , Qratio                ]
    dxs   = [ zeros_like(Ns), dQads       , dQratio               ]
    fns   = [ "VsNtot"      , "VsQads"    , "VsQratio"            ]
    xlabs = [ r'$N_{tot}$'  , r'$Q_{ads}$', r'$Q_{ads}/Q_{mgel}$' ]


#####################################################################
### select (according to nMin), save and plot radius Vs Ns curves ###
for Q,D in couples:
    cond = (Qs==Q) * (Ds==D)
    if cond.sum() < nMin: continue
    rg0 = Rg0[cond] ; assert all(rg0 == rg0[0]) ; rg0 = rg0[0]
    dg0 = dRg0[cond]; assert all(dg0 == dg0[0]) ; dg0 = dg0[0]
    rh0 = Rh0[cond] ; assert all(rh0 == rh0[0]) ; rh0 = rh0[0]
    dh0 = dRh0[cond]; assert all(dh0 == dh0[0]) ; dh0 = dh0[0]

    fname_pars = "_q%i"%Q + "_D%.1f"%D + "_alpha_" + alpha
    path = os.path.join( fol_plots , fname_base + fname_pars + ".dat" )
    with open(path , "w") as of: 
        of.write( "# Ntot \t Nads \t std \t Qads \t std \t Qratio \t std \t Rg \t std \t Rh (w NPs) \t std  \t Rh (w/o NPs) \t std \n" )
        of.write( "%.18e "%(0.) + "%.18e "%(0.) + "%.18e "%(0.) + "%.18e "%(0.) + "%.18e "%(0.) + "%.18e "%(0.) + "%.18e "%(0.) + "%.18e "%rg0 + "%.18e "%dg0 + "%.18e "%rh0 + "%.18e "%dh0 + "%.18e "%rh0 + "%.18e \n"%dh0 ) 
    savetxt( ".temp_data" , c_[Ns[cond],Nads[cond],dNads[cond],Qads[cond],dQads[cond],Qratio[cond],dQratio[cond],Rg[cond],dRg[cond],Rh_y[cond],dRh_y[cond],Rh_n[cond],dRh_n[cond]] )
    os.system( "cat .temp_data >> " + path )
    os.system( "rm .temp_data" )
    
    for x,dx,xlab,fn in zip(xs,dxs,xlabs,fns):
        path = os.path.join( fol_plots , fname_base    + fn + fname_pars + ".pdf" )
        figure()
        errorbar(x[cond], Rg[cond], xerr=dx[cond], yerr=dRg[cond], fmt='o', label=r"$R_g$")
        errorbar(Ns[cond], Rh_y[cond], xerr=dx[cond], yerr=dRh_y[cond], fmt='o', label=r"$R_h$")
        xlabel( xlab, fontsize=16 )
        ylabel( "microgel radius", fontsize=16 )
        legend()
        savefig( path ) ; close()
        
        path = os.path.join( fol_plots , fname_Rg_base + fn + fname_pars + ".pdf" )
        figure()
        errorbar(x[cond], Rg[cond], xerr=dx[cond], yerr=dRg[cond], fmt='o', label=r"$R_g$")
        xlabel( xlab, fontsize=16 )
        ylabel( r"$R_g$", fontsize=16 )
        savefig( path ) ; close()
        
        path = os.path.join( fol_plots , fname_Rh_base + fn + fname_pars + ".pdf" )
        figure()
        errorbar(x[cond], Rh_n[cond], xerr=dx[cond], yerr=dRh_n[cond], fmt='o', label="only microgel monomers")
        errorbar(x[cond], Rh_y[cond], xerr=dx[cond], yerr=dRh_y[cond], fmt='o', label="accounting adsorbed NPs")
        xlabel( xlab, fontsize=16 )
        ylabel( r"$R_H$", fontsize=16 )
        legend()
        savefig( path ) ; close()
    

##############################################
### comparison of curves with fixed D or q ###

for x,dx,xlab,fn in zip(xs,dxs,xlabs,fns):
    #vars_fixed   = [ Qs                            , Ds                              ]
    #fnames_pars  = [  "_q%i"%Q + "_alpha_" + alpha , "_D%.1f"%D + "_alpha_" + alpha  ]
    #vars_running = [ Ds                            , Qs                              ]
    #labels       = [ 'D = %.1f'%D                  , 'q = %i'%Q                      ]
    
    for Q in sort( list(set(Qs)) ):
        skip = True
        fname_pars = "_q%i"%Q + "_alpha_" + alpha 
        path_Rg   = os.path.join( fol_plots , fname_Rg_base   + fn + fname_pars + ".pdf" )
        path_Rh_y = os.path.join( fol_plots , fname_Rh_y_base + fn + fname_pars + ".pdf" )
        path_Rh_n = os.path.join( fol_plots , fname_Rh_n_base + fn + fname_pars + ".pdf" )
        
        paths = [ path_Rg  , path_Rh_y , path_Rh_n ]
        ys    = [ Rg       , Rh_y      , Rh_n      ]
        dys   = [ dRg      , dRh_y     , dRh_n     ]
        ylabs = [ r"$R_g$" ,  r"$R_H$" ,  r"$R_H$" ]
        
        for path,y,dy,yl in zip(paths,ys,dys,ylabs):
            figure()
            for D in sort( list(set(Ds)) ):
            	cond = (Qs==Q) * (Ds==D)
            	if cond.sum() < nMin: continue
            	skip = False
            	errorbar(x[cond], y[cond], xerr=dx[cond], yerr=dy[cond], fmt='o', label='D = %.1f'%D )
            if skip:
                close()
                continue
            xlabel( xlab, fontsize=16 )
            ylabel( yl  , fontsize=16 )
            legend( fontsize=16 , title='q = %i'%Q , title_fontsize=16 )
            savefig( path ) ; close()

    for D in sort( list(set(Ds)) ):
        skip = True
        fname_pars = "_D%.1f"%D + "_alpha_" + alpha
        path_Rg   = os.path.join( fol_plots , fname_Rg_base   + fn + fname_pars + ".pdf" )
        path_Rh_y = os.path.join( fol_plots , fname_Rh_y_base + fn + fname_pars + ".pdf" )
        path_Rh_n = os.path.join( fol_plots , fname_Rh_n_base + fn + fname_pars + ".pdf" )
        
        paths = [ path_Rg  , path_Rh_y , path_Rh_n ]
        ys    = [ Rg       , Rh_y      , Rh_n      ]
        dys   = [ dRg      , dRh_y     , dRh_n     ]
        ylabs = [ r"$R_g$" ,  r"$R_H$" ,  r"$R_H$" ]
	
        for path,y,dy,yl in zip(paths,ys,dys,ylabs):
            figure()
            for Q in sort( list(set(Qs)) ):
            	cond = (Qs==Q) * (Ds==D)
            	if cond.sum() < nMin: continue
            	skip = False
            	errorbar(x[cond], y[cond], xerr=dx[cond], yerr=dy[cond], fmt='o', label='q = %i'%Q )
            if skip:
                close()
                continue
            xlabel( xlab, fontsize=16 )
            ylabel( yl  , fontsize=16 )
            legend( fontsize=16 , title='D = %.1f'%D , title_fontsize=16 )
            savefig( path ) ; close()

print( "all data and plots were saved in the directory " + fol_plots )
print() ; print( "Done." ) ; print()
