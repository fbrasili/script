#!/usr/bin/python3

import sys
import os
from glob import glob
import matplotlib
matplotlib.use('Agg')
from pylab import *
from scipy import integrate
sys.path.append('/home/fbrasili/.python')
from chains import *
from plots import myPlot

print()
print( "=====================================================================================================================================" )
print( " plot the shrinking of microgel (Rh and Rg) and chains (weighted average of the gyration radius) Vs total number of nanoparticles in the simulation box " )
print( " save the computed quantities and the plots in the directory plots_shrinking " )
print( "=====================================================================================================================================" )
print( "  Usage: " )
print( "    plot_shrinkingVsN -options" )
print( "  Options: " )
print( "    -dir <name>		name of the directory where performing the analysis (default ./) " )
print( "    -Nmin <value>	minimum number of points to plot: if N<Nmin does not plot the adsorption curve (default 3) " )
print( "    -thres <value>      threshold on r, to distinguish the microgel core from its corona  (default 20) "  )
#print( "    -alpha <value>	AGGIUNGERE LA POSSIBILITÃ€ DI SCEGLIERE UN VALORE DI ALPHA DIVERSO DA 0
print( "=====================================================================================================================================" )
print()

alpha = "0.00" # PER ORA ALPHA E' FISSATO, MODIFICARE LO SCRIPT PER POTERLO SCEGLIERE

###########################################################
### name of the directory where to perform the analysis ###
if "-dir" in sys.argv:
    idx = sys.argv.index( "-dir" ) + 1
    fol = sys.argv[idx]
else:
    fol = "./"
assert os.path.isdir( fol ), "the directory " + fol + " does not exist"

################################################
### name of the directory where to save data ###
fol_plots = os.path.join( fol , 'plots_shrinking' )
if not os.path.isdir( fol_plots ): os.system( 'mkdir ' + fol_plots )

#############################################################################
### name of the directories with data from simulations, N, D and Q values ###
fols = array( glob( os.path.join( fol , "np*" ) ) )
Ns,Qs,Ds = [],[],[]
for fol in fols:
    idx0 = fol.index('/') ; idx0 = idx0 + fol[idx0:].index('_')
    idx1 = idx0 + fol[idx0:].index('n') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Ns += [ int(   fol[idx1:idx2] ) ]
    idx1 = idx2 + fol[idx2:].index('q') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Qs += [ int(   fol[idx1:idx2] ) ]
    idx1 = idx2 + fol[idx2:].index('D') + 1 ; idx2 = idx1 + fol[idx1:].index('_') ; Ds += [ float( fol[idx1:idx2] ) ]
fols, Ns, Qs, Ds = fols[argsort(Ns)], array(Ns)[argsort(Ns)], array(Qs)[argsort(Ns)], array(Ds)[argsort(Ns)]

'''
print( "computing the microscopic weighted shrinking of the microgels..." )
####################################################################################################################################
### import the radial profiles of nanoparticles and compute the weights (fraction of nanoparticles in the core and in the shell) ###
if "-thres" in sys.argv:
    idx = sys.argv.index( "-thres" ) + 1
    thres = float( sys.argv[idx] )
else:
    thres = 20.

data_profiles = [ myPlot('profile' , 'nps' , fol=fol , norm=True , ret=True) for fol in fols ]
conds = array([ r<=thres for r,_,_ in data_profiles ])
wcores  = array([ integrate.trapz( g[ cond] * 4 * pi * r[ cond]**2 , x = r[ cond] )  for [r,g,_],cond in zip(data_profiles,conds) ])
wshells = array([ integrate.trapz( g[~cond] * 4 * pi * r[~cond]**2 , x = r[~cond] )  for [r,g,_],cond in zip(data_profiles,conds) ])
weights = array([wcores,wshells]).transpose()
del data_profiles,wcores,wshells
'''

###########################
### read shrinking data ###
datas = array([ loadtxt( os.path.join( f , 'swelling' , 'shrinking' , 'shrinking.dat' ) , skiprows=1 , usecols=(0,3,4,7,9,10,11,12,13,14,15,16,17,18,19), unpack=True ) for f in fols ])
'''
conds = array([ len(data)==18 for data in datas ])
if not all(conds):
    datas = array([ data for data,cond in zip(datas,conds) if cond ])
    fols_discarded = fols[~conds]
    fols,Ns,Qs,Ds = fols[conds],Ns[conds],Qs[conds],Ds[conds]
    weights = weights[conds]
    print( "WARNING: some directories have been discarded due to wrong format of the file " + os.path.join( 'swelling' , 'shrinking' , 'shrinking.dat' ) )
    print( fols_discarded )
else:
    datas = array(datas)
'''
if len( shape(datas) ) == 2:
    assert all([ data[0]==float(alpha) for data in datas ]) , "the selected value of alpha (" + alpha + ") is missing in one of the directories"
    #_,_,_,shrRg, stdRg, _, _, shrRh, _, shrCh, shrCh_c, shrCh_n, dis, dis_c, dis_n, sqS, sqD, sqT = array([ data for data in datas ]).transpose()
    shrRg, errRg, shrRh, shrCh, errShr, shrCh_c, shrCh_n, dis, errDis, dis_c, dis_n, sqS, sqD, sqT = datas[:,1:].transpose()
elif len( shape(datas) ) == 3:
    #_,_,_,shrRg, stdRg, _, _, shrRh, _, shrCh, shrCh_c, shrCh_n, dis, dis_c, dis_n, sqS, sqD, sqT = array([ data[:, data[0]==alpha] for data in datas ]).transpose()
    shrRg, errRg, shrRh, shrCh, errShr, shrCh_c, shrCh_n, dis, errDis, dis_c, dis_n, sqS, sqD, sqT = array([ data[1:, data[0]==alpha] for data in datas ]).transpose()
del datas

'''
shrW   = array([ average([d,s], weights=w) for s,d,w in zip(shrCh  ,dis  ,weights) ])
shrW_c = array([ average([d,s], weights=w) for s,d,w in zip(shrCh_c,dis_c,weights) ])
shrW_n = array([ average([d,s], weights=w) for s,d,w in zip(shrCh_n,dis_n,weights) ])
del weights
'''

#############
### PLOTS ###
print( "plotting shrinking curves ..." )

#############################################################
### mimimum number of points to plot the shrinking curve ###
if "-Nmin" in sys.argv:
    idx = sys.argv.index('-Nmin') + 1
    nMin = int( sys.argv[idx] )
else:
    nMin = 3

########################################################################
### select (according to nMin), save and plot shrinking Vs Ns curves ###
fname_base = "shrinkingVsNtot"
fname_Rg_base = "shrinking_mgelRgVsNtot"
fname_Rh_base = "shrinking_mgelRhVsNtot"
fname_Cs_base = "shrinking_chainsVsNtot"
fname_Cd_base = "displacement_chainsVsNtot"
fname_Ssq_base = "sq_shrinking_chainsVsNtot"
fname_Dsq_base = "sq_displacement_chainsVsNtot"
fname_Tsq_base = "sq_total_chainsVsNtot"
fnames_base = [fname_base,fname_Rg_base,fname_Rh_base,fname_Cs_base,fname_Cd_base,fname_Ssq_base,fname_Dsq_base,fname_Tsq_base]

ys  = [ shrRg , shrRh , shrCh  , dis    , sqS  , sqD  , sqT  ]
dys = [ errRg , None  , errShr , errDis , None , None , None ]
ylabels  = array([ r"$R_g/R_g^{(0)}$", r"$R_H/R_H^{(0)}$", "chains shrinking", "chains displacement", "chains shrinking"         , "chains displacement"      , "microscopic shrinking" ])
headings = array([ "Rg/Rg0"          , "Rh/Rh0"          , "<R_chains>/<R0>" , "<r_chains>/<r0>"    , "sqrt(<R_chains^2>/<R0^2>)", "sqrt(<r_chains^2>/<r0^2>)", "microscopic shrinking" ])

couples = array([ [q,d] for q in set(Qs) for d in set(Ds) ])
for Q,D in couples:
    cond = (Qs==Q) * (Ds==D)
    if cond.sum() < nMin: continue

    fnames = [ f + "_q%i"%Q + "_D%.1f"%D + "_alpha_" + alpha  for f in fnames_base ]
    paths  = [ os.path.join( fol_plots , f ) for f in fnames ] 

    path = paths[0]+".dat"
    with open(path , "w") as of:
        of.write( "# Ntot, Rg/Rg0, err, Rh/Rh0, <R_chains>/<R0> (all), err, <R_chains>/<R0> (charged), <R_chains>/<R0> (neutral), <r_chains>/<r0> (all), err, <r_chains>/<r0> (charged), <r_chains>/<r0> (neutral), sqrt(<R_chains^2>/<R0^2>) (all) , sqrt(<r_chains^2>/<r0^2>) (all) , micoscopic_shrinking (all) \n" )
        of.write( "0.000e+00 1.000e+00 0.000e+00 1.000e+00 1.000e+00 0.000e+00 1.000e+00 1.000e+00 1.000e+00 0.000e+00 1.000e+00 1.000e+00 1.000e+00 1.000e+00 1.000e+00 \n" )
        savetxt( ".temp_data" , c_[Ns[cond],shrRg[cond],errRg[cond],shrRh[cond],shrCh[cond],errShr[cond],shrCh_c[cond],shrCh_n[cond],dis[cond],errDis[cond],dis_c[cond],dis_n[cond],sqS[cond],sqD[cond],sqT[cond]] , fmt='%.3e' )
    os.system( "cat .temp_data >> " + path )
    
    paths = paths[1:]
    for path,y,dy,head,yl in zip(paths,ys,dys,headings,ylabels):
        if dy is None:
            with open(path+".dat", "w") as of:
                of.write( "# Ntot "+head+" \n" )
                of.write( "0.000e+00 1.000e+00 \n" )
            savetxt( ".temp_data" , c_[Ns[cond],y[cond]] , fmt='%.3e' )
        else:
            dy = dy[cond]
            with open(path+".dat", "w") as of:
                of.write( "# Ntot "+head+" std \n" )
                of.write( "0.000e+00 1.000e+00 0.000e+00 \n" )
            savetxt( ".temp_data" , c_[Ns[cond],y[cond],dy] , fmt='%.3e' )
        os.system( "cat .temp_data >> " + path+".dat" )
        
        figure()
        errorbar(Ns[cond], y[cond], yerr=dy, fmt='o')
        xlabel( "number of nanoparticles", fontsize=16 )
        ylabel( yl, fontsize=16 )
        savefig( path+".pdf" ) ; close()
        
os.system( "rm .temp_data" )


##############################################
### comparison of curves with fixed D or q ###
pars       = array([ Qs  , Ds  ])
pars_names = array([ "q" , "D" ])
for j in [1,-1]:
    pars1,pars2 = pars[::j]
    pname,label = pars_names[::j]
    for p1 in sort( list(set(pars1)) ):
        paths = [ os.path.join( fol_plots , f + "_" + pname + "%i"%p1 + "_alpha_" + alpha + ".pdf" ) for f in fnames_base[1:] ]
        for path,y,dy,yl,head in zip(paths,ys,dys,ylabels,headings):
            nplots = 0
            for p2 in sort( list(set(pars2)) ):
                cond = (pars1==p1) * (pars2==p2)
                if cond.sum() >= nMin:
                    nplots += 1
                    if dy is None: yerr = None
                    else: yerr = dy[cond]
                    errorbar(Ns[cond], y[cond], yerr=yerr, fmt='o', label=label+" = %i"%p2)
            if nplots>1:
                xlabel( "number of nanoparticles", fontsize=16 )
                ylabel( yl, fontsize=16 )
                legend( fontsize=16 , title=pname+" = %i"%p1 , title_fontsize=16 )
                savefig( path )
            close()

print( "all data and plots were saved in the directory " + fol_plots )
print() ; print( "Done." ) ; print()
